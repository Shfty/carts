pico-8 cartridge // http://www.pico-8.com
version 8
__lua__
package={loaded={},_c={}}
package._c["src/engine"]=function()
require("engine/utility")
require("engine/scenegraph")
require("engine/debug")
end
package._c["engine/utility"]=function()
require("utility/math")
require("utility/vec2")
require("utility/sprites")
require("utility/map")
require("utility/collision")
require("utility/drawstate")
require("utility/perf")
end
package._c["utility/math"]=function()
function lerp(a,b,d)
	return a+d*(b-a)
end
end
package._c["utility/vec2"]=function()
--vec2
--two dimensional vector
-------------------------------
vec2={
	x=0,
	y=0
}

function vec2:new(ix,iy)
	self.__index=self
	return setmetatable({
		x=ix or 0,
		y=iy or 0
	}, self)
end

function vec2:__unm()
	return vec2:new(
		-self.x,
		-self.y
	)
end

function vec2:__add(rhs)
	if(type(rhs)=="table") then
 	return vec2:new(
 		self.x+rhs.x,
 		self.y+rhs.y
 	)
	end
	
	return vec2:new(
		self.x+rhs,
		self.y+rhs
	)
end

function vec2:__sub(rhs)
	if(type(rhs)=="table") then
 	return vec2:new(
 		self.x-rhs.x,
 		self.y-rhs.y
 	)
	end
	
	return vec2:new(
		self.x-rhs,
		self.y-rhs
	)
end

function vec2:__mul(rhs)
	if(type(rhs)=="table") then
 	return vec2:new(
 		self.x*rhs.x,
 		self.y*rhs.y
 	)
	end
	
	return vec2:new(
		self.x*rhs,
		self.y*rhs
	)
end

function vec2:__div(rhs)
	if(type(rhs)=="table") then
 	return vec2:new(
 		self.x/rhs.x,
 		self.y/rhs.y
 	)
 end
 
	return vec2:new(
		self.x/rhs,
		self.y/rhs
	)
end

function vec2:__mod(rhs)
	if(type(rhs)=="table") then
 	return vec2:new(
 		self.x%rhs.x,
 		self.y%rhs.y
 	)
 end
 
	return vec2:new(
		self.x%rhs,
		self.y%rhs
	)
end

function vec2:__pow(rhs)
	if(type(rhs)=="table") then
 	return vec2:new(
 		self.x^rhs.x,
 		self.y^rhs.y
 	)
 end
 
	return vec2:new(
		self.x^rhs,
		self.y^rhs
	)
end

function vec2:__concat(rhs)
	if(type(self)=="table") then
		return self:tostring()..rhs
	end

	if(type(rhs)=="table") then
		return self..rhs:tostring()
	end
end

function vec2:sqlen()
	local sql = 0
	sql+=self.x^2
	sql+=self.y^2
	return sql
end

function vec2:len()
	return sqrt(self:sqlen())
end

function vec2:lerp(tgt,d)
	d = max(d,0)
	d = min(d,1)
	return vec2:new(
		lerp(self.x,tgt.x,d),
		lerp(self.y,tgt.y,d)
	)
end

function vec2:tostring()
	return "x:"..flr(self.x)..
	",y:"..flr(self.y)
end

--input
poke(0x5f2d,1)

--graphics
poke(0x5f34,1)

--keyboard
-------------------------------
kp=nil
kc=nil

function update_kb()
	kp=stat(30)
	kc=stat(31)
end

function keyp(char)
	return kp and kc == char
end

--mouse
-------------------------------
mp=vec2:new()
mb=0

function update_mouse()
	mp.x=stat(32)
	mp.y=stat(33)
	mb=stat(34)
end

function keyp(char)
	return kp and kc == char
end
end
package._c["utility/sprites"]=function()
_old_sget = sget
function sget(pos)
	return _old_sget(pos.x,pos.y)
end

--sprite pos > sprite index
--@spos vec2 sprite pixel coords
--@return number sprite index
function spos2idx(spos)
	local x=flr(spos.x/8)
	local y=flr(spos.y/8)
	return stile2idx(vec2:new(x,y))
end

--sprite tile > sprite index
--@spos vec2 sprite tile coords
--@return number sprite index
function stile2idx(stile)
	return (stile.y*16)+stile.x
end

--sprite index > sprite tile
--@sidx vec2 map tile coords
--@return number sprite tile coords
function sidx2tile(sidx)
	return vec2:new(
		sidx%16, 
		flr(sidx/16)
	)
end

--sprite index > sprite pos
--@sidx number sprite index
--@return number sprite pixel coords
function sidx2pos(sidx)
	return sidx2tile(sidx)*8
end
end
package._c["utility/map"]=function()
--map pos > map tile
--@pos vec2 map pixel coords
--@return vec2 map tile coords
function mpos2tile(pos)
	return pos/8
end

--map tile > map pos
--@mtile vec2 map tile coords
--@return vec2 map pixel coords
function mtile2pos(mtile)
	return mtile*8
end

_old_mget = mget
function mget(pos)
	return _old_mget(pos.x, pos.y)
end
end
package._c["utility/collision"]=function()
--check collision
--check collision for a given px
--@mpos vec2 map pixel coords
--@mask (unused) number sprite flag mask
function ccol(mpos, mask)
	--fetch sprite from map
	local mp = mpos2tile(mpos)
	local s = mget(mp)

	--if a sprite is present
	if(s>0) then
		--get spritesheet coords
		local sp = sidx2pos(s)

		--offset by tile-space pos
		sp += mpos%8

		--check if pixel is non-0
		return sget(sp) > 0
	end
end
end
package._c["utility/drawstate"]=function()
function camerapos()
	return vec2:new(
		peek4(0x5f26),
		peek4(0x5f28)
	)
end

function getclip()
	local x1 = peek(0x5f20)
	local y1 = peek(0x5f21)
	local x2 = peek(0x5f22)
	local y2 = peek(0x5f23)
	return {
		x1,y1,
		x2-x1,y2-y1
	}
end
end
package._c["utility/perf"]=function()
function getfps()
	return stat(7)
end

function getfpstarget()
	return stat(8)
end
end
package._c["engine/scenegraph"]=function()
require("scenegraph/obj")
end
package._c["scenegraph/obj"]=function()
obj_count=0

--object
--basic scene graph unit
-------------------------------
obj={
	name="object",
	parent=nil,
	children=nil
}

function obj:subclass(t)
	self.__index=self
	return
		setmetatable(t or {}, self)
end

function obj:new(p,t)
	local o=obj.subclass(self,t)

	p=p or nil	
	if(p) p:addchild(o)
	o:init()
	
	return o
end

function obj:init()
	self.children = {}
	obj_count+=1
end

function obj:addchild(c)
	if(c.parent != nil) then
		c.parent:remchild(c)
	end
	
	add(self.children,c)
	c.parent=self
	
	return c
end

function obj:remchild(c)
	c.parent = nil
	del(self.children,c)
end

function obj:tostring()
	return self.name
end

function obj:print(pf)
	pf=pf or ""
	local str = pf
	str=str..self:tostring()
	str=str.."\n"
	
	for c in all(self.children) do
		str = str..c:print(pf.." ")
	end
	
	return str
end

function obj:update()
	for c in all(self.children) do
		c:update()
	end
end

function obj:draw()
	for c in all(self.children) do
		c:draw()
	end
end

function obj:destroy()
	if(self.parent) then
		self.parent:remchild(self)
		self.parent=nil
	end
	
	if(#self.children>0) then
 	while #self.children>0 do
 		self.children[1]:destroy()
 	end
	end
	
	obj_count-=1
end

require("obj/prim")
require("obj/move")
end
package._c["obj/prim"]=function()
--primitive
--object with transform
-------------------------------
prim=obj:subclass({
	name="primitive",
	pos=vec2:new(),
	org=vec2:new()
})

function prim:getpos()
	local pos=vec2:new()
	local c=self
	while(c!=nil) do
		if(c.pos) pos+=c.pos
		if(c.org) pos+=c.org
		c=c.parent
	end

	return pos
end

function prim:tostring()
	return
		obj.tostring(self).." - "..
		self.pos:tostring()
end

require("prim/cam")
require("prim/graphic")
end
package._c["prim/cam"]=function()
--cam
--primitive to control camera
-------------------------------
cam=prim:subclass({
	name="camera",
	org=vec2:new(-64.5,-64.5)
})

function cam:update()
	local pos = self:getpos()

	camera(
		pos.x,
		pos.y
	)
	prim.update(self)
end
end
package._c["prim/graphic"]=function()
--graphic
--primitive with visual element
-------------------------------
graphic=prim:subclass({
	name="graphic",
	v=true,									--visible
	c=nil, 							  --clip
	_cc=nil  							--cached clip
})

function graphic:draw()
	if(not self.v) return
	
	self:g_predraw()
	self:g_draw()
	self:g_postdraw()
	
 prim.draw(self)
end

function graphic:g_predraw()
	if(self.d) then
		self.cd=getclip()
		clip(
			self.d[1],
			self.c[2],
			self.c[3],
			self.c[4]
		)
	end
	
	if(self.c) then
		self.cc=getclip()
		clip(
			self.c[1],
			self.c[2],
			self.c[3],
			self.c[4]
		)
	end
end

function graphic:g_draw()
end

function graphic:g_postdraw()
	if(self._cc) then
		clip(
			self._cc[1],
			self._cc[2],
			self._cc[3],
			self._cc[4]
		)
		self._cc=nil
	end
end

require("graphic/dot")
require("graphic/map")
require("graphic/shape")
require("graphic/sprite")
require("graphic/stripe")
require("graphic/text")
end
package._c["graphic/dot"]=function()
--dot
--pixel graphic
-------------------------------
dot=graphic:subclass({
	name="dot",
	org=vec2:new(-0.5,-0.5),
	c=7 							 --color
})

function dot:g_draw()
	if(not self.v) return
	
	local pos = self:getpos()
	pset(
		pos.x,
		pos.y,
 	self.c
 )
	
	graphic.g_draw(self)
end
end
package._c["graphic/map"]=function()
--map
--map graphic
-------------------------------
obj_map=graphic:subclass({
	name="map",
	org=vec2:new(-0.5,-0.5),
	cx=0,
	cy=0
})

function obj_map:g_draw()
	if(not self.v) return
	
	local pos=self:getpos()
	
	map(
		self.cx,
		self.cy,
		pos.x,
		pos.y,
		self.w,
	 self.h
	)
	
	graphic.g_draw(self)
end
end
package._c["graphic/shape"]=function()
--shape
--graphic with
--stroke/fill colors
-------------------------------
shape=graphic:subclass({
	name="shape",
	sc=6,
	fc=7
})

function shape:g_draw()
	if(not self.v) return
	
	if(self.fc) self:draw_fill()
	if(self.sc) self:draw_stroke()
	
	graphic.g_draw(self)
end

function shape:draw_stroke()
end

function shape:draw_fill()
end

require("shape/box")
require("shape/circle")
end
package._c["shape/box"]=function()
--box
--rect shape
-------------------------------
box=shape:subclass({
	name="box",
	sz=vec2:new(8,8),  --size
	og=vec2:new(0,0) --origin
})

function box:draw_fill()
	local pos=self:getpos()
	pos -= self.og
	rectfill(
		pos.x,
		pos.y,
		pos.x+self.sz.x,
		pos.y+self.sz.y,
 	self.fc
 )
end

function box:draw_stroke()
	local pos=self:getpos()
	pos -= self.og
	rect(
		pos.x,
		pos.y,
		pos.x+self.sz.x,
		pos.y+self.sz.y,
 	self.sc
 )
end
end
package._c["shape/circle"]=function()
--circle
--circle shape
-------------------------------
circle=shape:subclass({
	name="circle",
	org=vec2:new(-0.5,-0.5),
	r=1,								   --radius
})

function circle:draw_fill()
	local pos=self:getpos()
	circfill(
		pos.x,
		pos.y,
		self.r,
 	self.fc
 )
end

function circle:draw_stroke()
	local pos=self:getpos()
	circ(
		pos.x,
		pos.y,
		self.r,
 	self.sc
 )
end
end
package._c["graphic/sprite"]=function()
--sprite
--sprite graphic
-------------------------------
sprite=graphic:subclass({
	name="sprite",
	org=vec2:new(-0.5,-0.5),
	sz=vec2:new(1,1),			--size
	og=vec2:new(-4,-4),	--origin
	s=0																	--sprite
})

function sprite:g_draw()
	if(not self.v) return
	
	local pos = self:getpos()
	spr(
		self.s,
		pos.x+self.og.x,
		pos.y+self.og.y,
		self.sz.x,
		self.sz.y
	)
	
	graphic.g_draw(self)
end
end
package._c["graphic/stripe"]=function()
--stripe
--line graphic
-------------------------------
stripe=graphic:subclass({
	name="stripe",
	org=vec2:new(-0.5,-0.5),
	tp=vec2:new(8,0),	--target pos
	at=true,										--abs target
	c=7								       --color
})

function stripe:g_draw()
	if(not self.v) return
	
	local pos = self:getpos()
	local t = self.tp
	if(not self.at) t += pos
	line(
		pos.x,
		pos.y,
		t.x,
		t.y,
 	self.c
 )
	
	graphic.g_draw(self)
end
end
package._c["graphic/text"]=function()
--text
--text graphic
-------------------------------
text=graphic:subclass({
	name="text",
	str=""
})

function text:g_draw()
	if(not self.v) return
	
	local pos=self:getpos()
	
	print(
		self.str,
		pos.x,
		pos.y
	)
	
	graphic.g_draw(self)
end
end
package._c["obj/move"]=function()
--move
--object for moving a parent
-------------------------------
move=obj:subclass({
	name="move",
	dp=vec2:new()
})

function move:update()
	self.parent.pos += self.dp
	self.dp=vec2:new()

	local pos =
		self.parent:getpos()
	if(ccol(pos)) then
		self.parent:destroy()
	end
end

--move_p
--projectile move
-------------------------------
move_p=obj:subclass({
	name="projectile move",
	a=0,
	s=80
})

function move_p:update()
	self.dp = vec2:new(
		cos(self.a),
		sin(self.a)
	) * self.s * dt
	
	move.update(self)
end
end
package._c["engine/debug"]=function()
require("debug/dbg_ui")
require("debug/dbg_panel")
require("debug/dbg_ovr")
require("debug/dbg_log")
require("debug/dbg_sg")
require("debug/dbg_axis")
end
package._c["debug/dbg_ui"]=function()
--debug ui
dbg_ui=graphic:subclass({
	name="debug ui",
	pos=vec2:new(2,2),
	tabs=nil,
	at=nil,
	tw=nil
})

function dbg_ui:init()
	graphic.init(self)
	
	local bg=box:new(self,{
		sz=vec2:new(123,8),
		sc=0x1107.0000,
		fc=0x1100.5a5a
	})
	
	self.tw=text:new(bg,{
		pos=vec2:new(2,2),
		str="foo"
	})
	
	self.tabs={}
	self.tabs["1"]=
		dbg_ovr:new(self)
	self.tabs["2"]=
		dbg_log:new(self)
	self.tabs["3"]=
		dbg_sg:new(self,{
			root=root
		})
end

function dbg_ui:update()
	graphic.update(self)
	self.pos=camerapos()+2
	
	for k,tab in pairs(self.tabs) do
 	if(keyp(k)) then
 		if(self.at!=k) then
				self.at=k
				self.tw.str=tab.name
			else
				self.at=nil
			end
 	end
	end
	
	for k,tab in pairs(self.tabs) do
		tab.v=k==self.at
	end
	
	self.v = self.at != nil
end
end
package._c["debug/dbg_panel"]=function()
--debug panel
-------------------------------
dbg_panel=graphic:subclass({
	name="debug panel",
	pos=vec2:new(0,8),
	sz=vec2:new(123,115),
	sy=0,
	key=nil,
	v=false,
	c={2,10,124,116}
})

function dbg_panel:init()
	graphic.init(self)
	local bg=box:new(self,{
		sz=self.sz,
		sc=0x1107.0000,
		fc=0x1100.5a5a
	})
end

function dbg_panel:update()
	if(not self.v) return
	
	if(keyp("-")) self.sy -= 114
	if(keyp("=")) self.sy += 114
	if(keyp("[")) self.sy -= 6
	if(keyp("]")) self.sy += 6
	
	self.sy = max(self.sy,0)
	
	graphic.update(self)
end

function dbg_panel:tostring()
	return
		prim.tostring(self).." "..
		"w:"..flr(self.w)..","..
		"w:"..flr(self.w)
end
end
package._c["debug/dbg_ovr"]=function()
--debug overlay
-------------------------------
dbg_ovr=dbg_panel:subclass({
	name="system info",
	key="1",
	mw=nil,		--memory widget
	cw=nil,		--cpu widget
	ow=nil			--object widget
})

function dbg_ovr:init()
	dbg_panel.init(self)
	
	self.tw=text:new(self,{
		pos=vec2:new(2,2)
	})
end

function dbg_ovr:update()
	dbg_panel.update(self)
	
	if(not self.v) return
	
	local str = ""
	
	--memory
	local mem=stat(0)
	
	--cpu
	local tcpu = stat(1)*100
	local scpu = stat(2)*100
	local ucpu = tcpu-scpu
	local fps = getfps()
	local tfps = getfpstarget()
	
	str=str..
		"    memory: "..mem.." kib\n"..
		"\n"..
		"system cpu: "..scpu.." %\n"..
		"  user cpu: "..ucpu.." %\n"..
		" total cpu: "..tcpu.." %\n"..
		"\n"..
		"target fps: "..tfps.."\n"..
		"       fps: "..fps.."\n"..
		"\n"..
		" obj_count: "..obj_count
		
	self.tw.str=str
end
end
package._c["debug/dbg_log"]=function()
--debug log
-------------------------------
dbg_log=dbg_panel:subclass({
	name="log",
	key="2",
	buf={},
	bl=30,
	tw=nil
})

function dbg_log:init()
	dbg_panel.init(self)
	
	self.tw=text:new(self,{
		pos=vec2:new(2,2)
	})
end

function dbg_log:update()
	dbg_panel.update(self)
	
	if(not self.v) return
	
	local str=""
	for s in all(self.buf) do
		str = str..s.."\n"
	end
	
	self.tw.pos.y=2-self.sy
	self.tw.str=str
end

function dbg_log:log(str)
	add(self.buf, str)
	if(#self.buf > self.bl) then
		del(
			self.buf,
			self.buf[1]
		)
	end
end

function dbg_log:clear()
	self.buf={}
end
end
package._c["debug/dbg_sg"]=function()
--debug scenegraph
-------------------------------
dbg_sg=dbg_panel:subclass({
	name="scenegraph",
	root=nil,
	key="3",
	tw=nil
})

function dbg_sg:init()
	dbg_panel.init(self)
	
	self.tw=text:new(self,{
		pos=vec2:new(2,2)
	})
end

function dbg_sg:update()
	dbg_panel.update(self)
	
	if(not self.v) return
	
	self.tw.pos.y=2-self.sy
	self.tw.str=root:print()
end
end
package._c["debug/dbg_axis"]=function()
--debug coordinate axis
-------------------------------
dbg_axis=prim:subclass({
	name="debug axis"
})

function dbg_axis:draw()
	local pos=self:getpos()

	line(
		pos.x,
		pos.y,
		pos.x+5,
		pos.y,
		12
	)
	
	line(
		pos.x,
		pos.y,
		pos.x,
		pos.y+5,
		11
	)
	
	prim.draw(self)
end
end
package._c["src/game"]=function()
require("game/effects")
require("game/projectiles")
require("game/pko")
end
package._c["game/effects"]=function()
require("effects/trail")
end
package._c["effects/trail"]=function()
trail=graphic:subclass({
	name="trail",
	cs={12,13,1}, --colors
	ld=4,									--line divisions
	ds=nil,							--divisions
	ln=32,								--length
	md=0,								--move delta
})

function trail:init()
	prim:init()
	self.ds={}
	local pos=self:getpos()
	for i=1,self.ld do
		add(self.ds,pos)
	end
end

function trail:update()
	local pos = self:getpos()
	local dp = pos-self.ds[#self.ds]
 self.md = dp:len()/(self.ln/self.ld)
 
	if(self.md>=1) then
 	add(self.ds,pos)
 	if(#self.ds>self.ld) then
 		del(self.ds,self.ds[1])
 	end
	end
	
	graphic.update(self)
end

function trail:g_draw()
	for i=1,#self.cs do
		local idx = #self.cs-i+1
		local dcs=(i-1)/#self.cs
		local dce=i/#self.cs
		local c=self.cs[idx]
		for o=1,#self.ds do
			local dds=(o-1)/#self.ds
			local dde=o/#self.ds
			local ds=self.ds[o]
			local de=self.ds[o+1] or self:getpos()
			
			--contain
			if(dcs < dds and dce > dde) then
				line(
					ds.x-0.5,
					ds.y-0.5,
					de.x-0.5,
					de.y-0.5,
					c
				)
			else
 			local li=dcs >= dds and dcs <=dde
 			local ri=dce >= dds and dce <=dde
			
 			if(ri and not li) then
					local l=vec2.lerp(ds,de,self.md)
 				line(
 					ds.x-0.5,
 					ds.y-0.5,
 					l.x-0.5,
 					l.y-0.5,
 					c
 				)
 			else
  			if(li and not ri) then
					local l=vec2.lerp(ds,de,self.md)
  				line(
  					l.x-0.5,
  					l.y-0.5,
  					de.x-0.5,
  					de.y-0.5,
  					c
  				)
  			end
 			end
			end
		end
	end
	
	graphic.g_draw(self)
end
end
package._c["game/projectiles"]=function()
require("projectiles/missile")
require("projectiles/laser")
end
package._c["projectiles/missile"]=function()
missile=prim:subclass({
	name="missile",
	move=nil,
	sa=0,											--start angle
	ss=80,										--start speed
	d=2
})

function missile:init()
	prim.init(self)
	circle:new(self)
	self.move=move_p:new(self,{
		a=self.sa,
		s=self.ss
	})
	self:trail()
end

function missile:update()
	self.move.a += 0.25 * dt

	self.d -= dt
	if(self.d <= 0) self:destroy()
	
	prim.update(self)
end

function missile:trail()
	return trail:new(self,{
		cs={6,12,13,1}
	})
end
end
package._c["projectiles/laser"]=function()
--laser
-------------------------------
laser=missile:subclass({
	name="laser"
})

function laser:init()
	prim.init(self)
	dot:new(self)
	self:trail()
end

function laser:trail()
	return trail:new(self)
end
end
package._c["game/pko"]=function()
pko=prim:subclass({
	name="pko",
	pos=vec2:new(64,64),
	vx=0,
	vy=0,
	ac=600,
	dc=600,
	mv=60
})

function pko:init()
	prim.init(self)
	sprite:new(self,{
		s=1
	})
	trail:new(self)
	cam:new(self)
end

function pko:update()
	local wx = 0
	if(btn(0)) wx -= 1
	if(btn(1)) wx += 1
	
	local wy = 0
	if(btn(2)) wy -= 1
	if(btn(3)) wy += 1
	
	if(wx==0 and self.vx!=0) then
		local dv=min(
			self.dc*dt,
			abs(self.vx)
		)*sgn(self.vx)
		
		self.vx-=dv
	end
	
	if(wy==0 and self.vy!=0) then
		local dv=min(
			self.dc*dt,
			abs(self.vy)
		)*sgn(self.vy)
		
		self.vy-=dv
	end
	
	self.vx += wx * self.ac * dt
	self.vy += wy * self.ac * dt

	if(abs(self.vx) > self.mv) then
		self.vx=self.mv*sgn(self.vx)
	end
	
	if(abs(self.vy) > self.mv) then
		self.vy=self.mv*sgn(self.vy)
	end

	self.pos.x += self.vx * dt
	self.pos.y += self.vy * dt

	if(btnp(4)) then
		self:burst(missile,40)
 end
 
	prim.update(self)
end

function pko:burst(t,num)
	if(debug_mode) then
		log("burst")
	end
	
	for i=0,num-1 do
		t:new(l_ms,{
			pos=self.pos,
			sa=i/num
		})
	end
end
end
function require(p)
local l=package.loaded
if (l[p]==nil) l[p]=package._c[p]()
if (l[p]==nil) l[p]=true
return l[p]
end
require("src/engine")
require("src/game")

--main

--config
-------------------------------
debug_mode=true

--variables
-------------------------------
dt=nil

root=nil

l_pl=nil
l_tr=nil
l_ms=nil

d_ui=nil
function log(str)
	d_ui.tabs["2"]:log(str)
end

player=nil

--initialization
-------------------------------
function _init()
	--setup scenegraph
	root=obj:new(nil,{
		name="root"
	})

	bg=obj_map:new(root,{
		name="background",
		w=16,
		h=16
	})
	
	l_pl=obj:new(root,{
		name="layer: player"
	})
	
	l_ms=obj:new(root,{
		name="layer: missiles"
	})
	
	l_ui=obj:new(root,{
		name="layer: ui"
	})
	
	player=pko:new(l_pl)
	
	--debug ui
	if(debug_mode) do
		d_ui=dbg_ui:new(l_ui)
	end
end

--main loop
-------------------------------
function _update60()
	if(dt==nil) then
		dt=1/getfpstarget()
	end
	
	if(debug_mode) then
		update_kb()
	end
	
	root:update()
end

--render loop
-------------------------------
function _draw()
	cls()
	root:draw()
end
__gfx__
0000000007800e80500000000000000777777777d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000e8c79182650000000000007766666666dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070020d94502565000000000077766666666ddd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770000c06d010556500000000777766666666dddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000c00c1001555650000007777766666666ddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070000c65100555565000077777666666666dddddd0000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000600500555556500777776666666666ddddddd000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000c100c10555555657777766666666666dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000076666666666ddddd5555555100000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000007666666666dddddd5555555100000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000766666666ddddddd5555555100000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000076666666dddddddd5555555100000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000076666666dddddddd5555555100000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000076666666ddddddd55555555100000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000076666666dddddd555555555100000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000076666666ddddd5555555555100000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000dddddddd555555555551111100000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000ddddddd555555555511111000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000dddddd555555555111110000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000ddddd555555551111100000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000dddd555555551111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000ddd555555551110000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000dd555555551100000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000d111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1500000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000000030404020000000000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000003141414140402000000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1500000314141414141414020000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1404041414141414141414140404041400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1414141414141414141414141414141400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344
00 41424344

